Go(lang)
Short introduction

Author: Pradeep Mahdevu

* Who am I?

* Why Go?
- Fast Compiled
- Garbage-collected
- MultiCore Hardware
- Lightweight type system
- Cross Compile and Cross Platform

* Installation
*Ubuntu*

    sudo add-apt-repository ppa:gophers/go
    sudo apt-get update
    sudo apt-get install golang-stable

*Mac*

    brew install golang

*$PATH*

    export GOROOT=$HOME/go        # Brewers - /usr/local/opt/go/libexec
    export PATH=$PATH:$GOROOT/bin

* $GOPATH and workspace
- Go commands all rely on $GOPATH.
- This is not the $GOROOT variable where Go is installed.
In $GOPATH, you must have three folders as follows.

- src for source files whose suffix is .go, .c, .g, .s.
- pkg for compiled files whose suffix is .a.
- bin for executable file

* Are we ready to Go?

.image ./images/goCommand.png 500 600

* IDEs
.link  https://github.com/Microsoft/vscode-go Visual Studio Code (vscode-go)
- IntelliJ with Golang Plugin
- Atom with Golint and Golang
- Vim and Emacs

* This talk

https://github.com/spotlmnop/goLangIntro
git clone https://github.com/spotlmnop/goLangIntro

* Learning Go
https://tour.golang.org/welcome/1

* Slide deck
go get golang.org/x/tools/cmd/present
    $ present

* Lets Go already
.code commands/helloWorld/main.go

*Types*
- Integers - uint8, uint16, uint32, uint64, int8, int16, int32 and int64.
- Floating point types: float32 and float64
- Strings
- Booleans

* Variables
.code commands/rcTut1/main.go

* Constants
.code commands/rcTut2/main.go

* Control loops
- For loop
- While loop  (You don't need one - just use *for*)
- if
- switch

* Arrays and Slices

*Arrays*
- An array's size is fixed
- Arrays do not need to be initialized explicitly
- Go's arrays are values
- Pass by value ((To avoid the copy you could pass a pointer to the array)
- inflexible (Why? See slices)

*Slices*
- Slice type is an abstraction built on top of Go's array type
- Slice type has no specified length
- A slice is a descriptor of an array segment

* Slice Internal
Structure

.image ./images/slice.png
make([]byte, 5)

.image ./images/slice2.png


* Slice Internal contd.
- s = s[2:4]

.image ./images/slice3.png


*Best* *Way*
t := make([]byte, len(s), (cap(s)+1)*2)

*Append*
func append(s []T, x ...T) []T

* Maps
var x map[string]int
x := make(map[string]int);

var timeZone = map[string]int{
    "UTC":  0*60*60,
    "EST": -5*60*60
}

* Functions
- Simple
- Multiple return types
- Supports Arbitrary number of variables
- defer


* Structs
.code commands/rcTut8/main.go /^type Employee struct /,/^}/

*new*
 - Does not initialize the memory, but only zeroes it.
 - new(T) allocates zeroed storage for a new item of type T and returns its address
 - Constructors
 -







